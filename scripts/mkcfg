#!/usr/bin/env python

'''
Usage:
  mkcfg --list-targets
  mkcfg <target>

Options:
  -l --list-targets       show the available configuration targets
'''

import os, sys
import docopt
from mercury import configtemplates as templates


BANNER = '''
___________________________________________________________________________
|::
|:: mkcfg interactive configfile generator
|:: issue "mkcfg <target>" to create a config file for a target utility.
|::
|::
|:: available config targets:
|:'''

BANNER_CLOSE = '|__________________________________________________________________________\n'

targets = {
  'dfproc': {
    'description': 'Create and transform Pandas dataframes',
    'template': templates.DFPROC_TEMPLATE
  },
  'xfile': {
    'description': 'Read and transform CSV or JSON records',
    'template': templates.XFILE_TEMPLATE
  },
  'ngst': {
    'description': 'Send CSV or JSON records to a designated target',
    'template': templates.NGST_TEMPLATE
  },
  'cyclops': {
    'description': 'Run custom code in response to filesystem events',
    'template': templates.CYCLOPS_TEMPLATE
  },
  'j2sqlgen': {
    'description': 'Generate CREATE TABLE sql statements from JSON metadata',
    'template': templates.J2SQLGEN_TEMPLATE
  },
  'pgexec': {
    'description': 'Execute SQL commands against a PostgreSQL database',
    'template': templates.PGEXEC_TEMPLATE
  },
  'pgmeta': {
    'description': 'Extract table metadata as JSON from a PostgreSQL database',
    'template': templates.PGMETA_TEMPLATE
  },
  'profilr': {
    'description': 'Run custom data profiling logic against a file-based dataset',
    'template': templates.PROFILR_TEMPLATE
  },
  'quasr': {
    'description': 'Run custom QA/profiling code against a relational dataset',
    'template': templates.QUASR_TEMPLATE
  }
}


def main(args):
    if args['--list-targets']:
      print(BANNER)
      for key, value in targets.items():
        print('|: %s (%s)' % (key, value['description']))
        print('|:')      
      print(BANNER_CLOSE)
      return

    

if __name__ == '__main__':
    args = docopt.docopt(__doc__)
    main(args)